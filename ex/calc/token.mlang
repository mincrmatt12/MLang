#include strlib.mlang
#include stdlib.mlang

static 8 * in_str = null;
static 64  str_len = 0;
static 64  position = 0;
static debug = false;

init_tokenizer(8* input_string, 64 length) = {
	in_str = input_string;
	str_len = length;
	position = 0;
}

get_character<8>() = {
	if (position >= str_len) return 0;
	return in_str[position++];
}

peek_character<8>() = {
	if (position >= str_len) return 0;
	return in_str[position];
}

advance_spaces() = {
	while (peek_character() == ' ') {
		get_character();
	}
}

forward parse_primary<64>();

parse_number<64>() = {
	var 64 number = 0;
	advance_spaces();
	var 8 c = peek_character();
	if (debug) printf("pn Cc %c, %d\n", c, position);
	while (c >= '0' && c <= '9') {
		number *= 10;
		number += c - '0';
		get_character();
		c = peek_character();
	}
	if (debug) printf("pn %d, %d\n", number, position);
	return number;
}

get_prec<8>(8 operator) = {
	if (operator == '+' || operator == '-') return 0;
	else return 1;
}

is_operator<8>(8 char) = {
	return char == '+' || char == '-' || char == '*' || char == '/' || char == '%';
}

parse_expression<64>(64 lhs, 8 min_prec) = {
	var 64 debug = <64>(debug);
	if (debug) printf("parse_expr %d, %d\n", lhs, <64>(min_prec));
	advance_spaces();
	if (peek_character() == 0) return lhs;
	var 8 lookahead = peek_character();
	if (debug) {
		printf("LHEAD = %c", lookahead);
	    printf("PREC = %d", get_prec(lookahead));
	    printf("IS_OPERATOR = %d\n", is_operator(lookahead));
	}
	while (is_operator(lookahead) && (get_prec(lookahead) >= min_prec)) {
		var 8 op = lookahead;
		if (debug) printf("OP = %c, ", op);
		get_character();
		var 64 rhs = parse_primary();
		if (debug) printf("RHS = %d, ", rhs);
		advance_spaces();
		lookahead = peek_character();
		if (debug) {
			printf("LOOKAHEAD = %c, ", lookahead);
			printf("IS_OPERATOR = %d\n", is_operator(lookahead));
		}
		while (is_operator(lookahead) && (get_prec(lookahead) > get_prec(op))) {
			if (debug) printf("parse_expr il %c\n", lookahead);
			rhs = parse_expression(rhs, get_prec(lookahead));
			advance_spaces();
			lookahead = peek_character();
		}
		if (op == '+') lhs = lhs + rhs;
		else if (op == '-') lhs = lhs - rhs;
		else if (op == '*') lhs = lhs * rhs;
		else if (op == '/') lhs = lhs / rhs;
		else if (op == '%') lhs = lhs % rhs;
	}
	return lhs;
}

parse_primary<64>() = {
	advance_spaces();
	var 8 c = peek_character();
	if (debug) printf("parse primary c = %c\n", c);
	if (c == '(') {
		get_character();
		var 64 result = parse_expression(parse_primary(), 0);
		advance_spaces();
		if (peek_character() == ')') get_character();
		return result;
	}
	else if (c == '-') {
		get_character();
		advance_spaces();
		return -parse_primary();
	}
	else {
		return parse_number();
	}
}

evaluate<64>(8* input_string) = {
	init_tokenizer(input_string, strlen(input_string)); // init with the string, exlcuding the final terminator
	if (debug) printf("starting parse, length = %d\n", str_len);
	
	return parse_expression(parse_primary(), 0);
}
